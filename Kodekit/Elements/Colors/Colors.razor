@page "/{kitId}/colors"
@using Kodekit.Components.Colors

<div class="colors page">
    <div class="page__container">
        <header class="page--header">
            <div class="title">Base Styles</div>
            <h2>Colors</h2>
            <p>
                Colors selected here will be applied throughout the kit. They will be
                applied to their respective elements (such as primary and secondary buttons)
                &amp; system colors, as well as accessed via css variables.
            </p>
        </header>
        <div class="content">
            <!-- Contrast Checker Component Here -->
            @if (kit.Revision != null)
            {
                <EditForm EditContext="@Context">
                    <KitStyle Kit=kit.Kit>
                        <section class="colors--brand">
                            <header class="flex">
                                <h3><span>01</span> Brand Colors</h3>
                                <p class="subheader">
                                    The brand colors are the three main colors that will be used to accent your site.
                                </p>
                            </header>
                            <div class="color-display primary">
                                <div class="color-main">
                                    <label class="edit-color">
                                        @if (string.IsNullOrEmpty(Primary.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="Primary" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Primary" Weight="Primary" Hex="primary-500" />
                                        }
                                        <InputColor @bind-Value="Primary.HexValue" />
                                    </label>
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "primary-" + weight;
                                        @if (string.IsNullOrEmpty(Primary.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="@weight" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Primary" Weight="@weight" Hex="@hex" />
                                        }
                                    }
                                </div>
                            </div>
                            <div class="color-display secondary">
                                <div class="color-main">
                                    <label class="edit-color">
                                        @if (string.IsNullOrEmpty(Secondary.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="Secondary" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Secondary" Weight="Secondary" Hex="secondary-500" />
                                        }
                                        <InputColor @bind-Value="Secondary.HexValue" />
                                    </label>
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "secondary-" + weight;
                                        @if (string.IsNullOrEmpty(Secondary.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="@weight" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Secondary" Weight="@weight" Hex="@hex" />
                                        }
                                    }
                                </div>
                            </div>
                            <div class="color-display tertiary">
                                <div class="color-main">
                                    <label class="edit-color">
                                        @if (string.IsNullOrEmpty(Tertiary.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="Tertiary" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Tertiary" Weight="Tertiary" Hex="tertiary-500" />
                                        }
                                        <InputColor @bind-Value="Tertiary.HexValue" />
                                    </label>
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "tertiary-" + weight;
                                        @if (string.IsNullOrEmpty(Tertiary.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="@weight" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Tertiary" Weight="@weight" Hex="@hex" />
                                        }
                                    }
                                </div>
                            </div>
                        </section>
                        <section class="colors--greyscale">
                            <header class="flex">
                                <h3><span>02</span>Greyscale</h3>
                                <p class="subheader">
                                    The greyscale colors will primarily be used for text.
                                </p>
                            </header>
                            <div class="color-display greyscale">
                                <div class="color-main">
                                    <label class="edit-color">
                                        @if (string.IsNullOrEmpty(Lightest.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="Lightest" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Lightest" Weight="Lightest" Hex="grey-100" />
                                        }
                                        <InputColor @bind-Value="Lightest.HexValue" />
                                    </label>
                                    <label class="edit-color">
                                        @if (string.IsNullOrEmpty(Darkest.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="Darkest" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Darkest" Weight="Darkest" Hex="grey-900" />
                                        }
                                        <InputColor @bind-Value="Darkest.HexValue" />
                                    </label>
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "grey-" + weight;
                                        @if (string.IsNullOrEmpty(Lightest.HexValue) || string.IsNullOrEmpty(Darkest.HexValue))
                                        {
                                            <ColorCardPlaceholder Weight="@weight" />
                                        }
                                        else
                                        {
                                            <ColorCard Type="Grey" Weight="@weight" Hex="@hex" />
                                        }
                                    }
                                </div>
                            </div>
                        </section>
                        <section class="colors--system">
                            <header class="flex">
                                <h3><span>03</span>System Colors</h3>
                                <p class="subheader">
                                    The system colors are used to highlight alerts.
                                </p>
                            </header>
                            <div class="color-display">
                                <label class="edit-color">
                                    @if (string.IsNullOrEmpty(Error.HexValue))
                                    {
                                        <ColorCardPlaceholder Weight="Error" />
                                    }
                                    else
                                    {
                                        <ColorCard Type="Error" Weight="Error" Hex="error-500" />
                                    }
                                    <InputColor @bind-Value="Error.HexValue" />
                                </label>
                                <label class="edit-color">
                                    @if (string.IsNullOrEmpty(Warning.HexValue))
                                    {
                                        <ColorCardPlaceholder Weight="Warning" />
                                    }
                                    else
                                    {
                                        <ColorCard Type="Warning" Weight="Warning" Hex="warning-500" />
                                    }
                                    <InputColor @bind-Value="Warning.HexValue" />
                                </label>
                                <label class="edit-color">
                                    @if (string.IsNullOrEmpty(Success.HexValue))
                                    {
                                        <ColorCardPlaceholder Weight="Success" />
                                    }
                                    else
                                    {
                                        <ColorCard Type="Success" Weight="Success" Hex="success-500" />
                                    }
                                    <InputColor @bind-Value="Success.HexValue" />
                                </label>
                            </div>
                        </section>
                        <section class="colors--preview">
                            <header class="flex">
                                <h3>Preview</h3>
                                <p class="subheader">A small example of all colors, buttons, and typography applied to two cards.</p>
                            </header>
                            <div class="colors--preview-background">
                                <label>* Preview Background Color <InputColor @bind-Value="@PreviewBackground" BackgroundColor="@PreviewBackground" /></label>
                            </div>
                            <div class="cards--wrapper">
                                <div class="card-with-image" style="background: @PreviewBackground;">
                                    <div class="color-blobs--wrapper">
                                        <ColorBlob Primary="@Primary.HexValue" />
                                        <ColorBlob2 Secondary="@Secondary.HexValue" Tertiary="@Tertiary.HexValue"/>
                                        <img class="color-blob--noise" src="images/Noise & Texture.png" />
                                    </div>
                                    <div class="color-content--wrapper">
                                        <h6 class="tertiary">Information</h6>
                                        <h4>Brand Colors</h4>
                                        <p>
                                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit
                                        </p>
                                        <button>Primary CTA</button>
                                    </div>
                                </div>
                                <div class="card-text" style="background: @PreviewBackground;">
                                    <div class="card-text--container">
                                        <h6 class="tertiary">Information</h6>
                                        <h4>Brand Colors</h4>
                                        <p>
                                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit
                                        </p>
                                        <div class="buttons">
                                            <button>Primary CTA</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>
                    </KitStyle>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string? kitId { get; set; }

    (Kit Kit, KitRevision Revision) kit;
    List<Variable<Color>>? ColorList;
    Color? Primary;
    Color? Secondary;
    Color? Tertiary;
    Color? Lightest;
    Color? Darkest;
    Color? Success;
    Color? Warning;
    Color? Error;
    EditContext? Context;    

    List<string> Weights = new List<string> { "50", "100", "200", "300", "400", "500", "600", "700", "800", "900" };
    public string PreviewBackground;

    bool DebounceInputs;

    protected override async Task OnInitializedAsync()
    {
        DebounceInputs = true;
        await base.OnInitializedAsync();
    }

    protected async Task<(Kit Kit, KitRevision Revision)> GetAsync()
    {
        kit = await KitRepository.GetCurrentAsync(kitId);
        ColorList = kit.Revision.Colors;
        Primary = ColorList.FirstOrDefault(x => x.Name == "Primary").Value;
        Secondary = ColorList.FirstOrDefault(x => x.Name == "Secondary").Value;
        Tertiary = ColorList.FirstOrDefault(x => x.Name == "Tertiary").Value;
        Lightest = ColorList.FirstOrDefault(x => x.Name == "Lightest").Value;
        Darkest = ColorList.FirstOrDefault(x => x.Name == "Darkest").Value;
        Success = ColorList.FirstOrDefault(x => x.Name == "Success").Value;
        Warning = ColorList.FirstOrDefault(x => x.Name == "Warning").Value;
        Error = ColorList.FirstOrDefault(x => x.Name == "Error").Value;
        Context = new EditContext(kit.Revision.Colors);
        return kit;
    }

    protected async Task UpdateAsync((Kit Kit, KitRevision Revision) kit)
    {
        await KitRepository.UpdateAsync(kit.Kit.Id, kit.Revision.Id);
    }
}