@page "/{kitId}/typography"

<div class="typography page">
    <div class="page__container">
        <header class="page--header">
            <div class="title">Base Styles</div>
            <h2>Typography</h2>
            <p>
                Select your font family, weight, size, line-height and typescale.
                This will then be applied to the <span>&lt;h1&gt;</span> - <span>&lt;h6&gt;</span> html tags.
            </p>
        </header>
        <div class="content">
            @if (kit.Revision != null)
            {
                @*                <AccessibilityChecker Model="Model"/>*@
                <EditForm EditContext="@ContextHeadings">
                    <section>
                        <header>
                            <h3 class="section-header"><span>01</span>Heading Settings</h3>
                        </header>
                        <div class="subsection heading-settings">
                            <label class="preview-text">
                                <input @bind-value="previewText" @bind-value:event="oninput" class="large" />
                                Preview Text
                            </label>
                            <div class="inputs--wrapper">
                                <label>
                                    @if (Fonts.Items != null)
                                    {
                                        <InputSelect class="medium" @bind-Value="Headings.Font.Family">
                                            <option value="">Select a font...</option>
                                            @foreach (var font in Fonts.Items)
                                            {
                                                <option value="@font.Family">
                                                    @font.Family
                                                </option>
                                            }
                                        </InputSelect>
                                    }
                                    Heading Font
                                </label>
                                <label>
                                    <InputFontWeight @bind-Value="Headings.Font.Weight" />
                                    Default Heading Weight
                                </label>
                                <label>
                                    <InputNumber @bind-Value="Headings.Font.Size" min="0" />
                                    Base Font Size (px)
                                </label>
                                <label>
                                    <InputSelect class="medium" @bind-Value="Headings.TypeScale">
                                        <option value="">Select a type scale...</option>
                                        @foreach (var scale in Kodekit.Models.Elements.Typography.TypeScales)
                                        {
                                        <option value="@scale.Key">
                                            @scale.Key (@scale.Value)
                                        </option>
                                        }
                                    </InputSelect>
                                    Choose a Type Scale
                                </label>
                                <label>
                                    <InputNumber @bind-Value="Headings.Font.LineHeight" min="1" />
                                    Base Line Height (%)
                                </label>
                            </div>
                            <button @onclick="Toggle" class="edit-options">Manually size fonts <i class="material-icons">edit</i></button>
                            <div class="fontsize-overrides toggle-@ToggleOption">
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-900")"
                                       @onchange="@(e => Overrides("type-900", e.Value.ToString()))" />
                                    h1 (px)
                                </label>
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-800")"
                                       @onchange="@(e => Overrides("type-800", e.Value.ToString()))" />
                                    h2 (px)
                                </label>
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-700")"
                                       @onchange="@(e => Overrides("type-700", e.Value.ToString()))" />
                                    h3 (px)
                                </label>
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-600")"
                                       @onchange="@(e => Overrides("type-600", e.Value.ToString()))" />
                                    h4 (px)
                                </label>
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-500")"
                                       @onchange="@(e => Overrides("type-500", e.Value.ToString()))" />
                                    h5 (px)
                                </label>
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-400")"
                                       @onchange="@(e => Overrides("type-400", e.Value.ToString()))" />
                                    h6 (px)
                                </label>
                                <label>
                                    <input type="number" min="0" value="@SetValue("type-300")"
                                       @onchange="@(e => Overrides("type-300", e.Value.ToString()))" />
                                    .subtitle (px)
                                </label>
                            </div>
                        </div>
                        <Preview Kit=kit.Kit>
                            <label>Header 1 (H1) - Font Size: @HeadingScale("900")</label>
                            <h1>@previewText</h1>
                            <label>Header 2 (H2) - Font Size: @HeadingScale("800")</label>
                            <h2>@previewText</h2>
                            <label>Header 3 (H3) - Font Size: @HeadingScale("700")</label>
                            <h3>@previewText</h3>
                            <label>Header 4 (H4) - Font Size: @HeadingScale("600")</label>
                            <h4>@previewText</h4>
                            <label>Header 5 (H5) - Font Size: @HeadingScale("500")</label>
                            <h5>@previewText</h5>
                            <label>Header 6 (H6) - Font Size: @HeadingScale("400")</label>
                            <h6>@previewText</h6>
                            <label>Subtitle (.subtitle) - Font Size: @HeadingScale("300")</label>
                            <p class="subtitle">@previewText</p>
                        </Preview>
                    </section>
                </EditForm>
                <EditForm EditContext="@ContextParagraphs">
                    <section>
                        <header>
                            <h3><span>02</span> Paragraph Settings</h3>
                        </header>
                        <div class="subsection paragraph-settings">
                            <label class="preview-text">
                                <textarea @bind-value="previewTextBody" @bind-value:event="oninput" />
                                Preview Text
                            </label>
                            <div class="inputs--wrapper">                        
                                <label>
                                    <InputSelect class="medium" @bind-Value="Paragraphs.Font.Family">
                                        @if (Fonts.Items != null)
                                            {
                                            <option value="">Select a body font...</option>
                                            @foreach (var font in Fonts.Items)
                                                {
                                                <option value="@font.Family">
                                                    @font.Family
                                                </option>
                                                }
                                            }
                                    </InputSelect>
                                    Body Font
                                </label>
                                <label>
                                    <InputNumber @bind-Value="Paragraphs.Font.Size" min="1" />
                                    Base Font Size (px)
                                </label>
                                <label>
                                    <InputSelect class="medium" @bind-Value=Paragraphs.TypeScale>
                                        <option value="">Select a type scale...</option>
                                        @foreach (var scale in Kodekit.Models.Elements.Typography.TypeScales)
                                         {
                                        <option value="@scale.Key">
                                            @scale.Key (@scale.Value)
                                        </option>
                                        }
                                    </InputSelect>
                                    Choose a Type Scale
                                </label>
                                <label>
                                    <InputNumber @bind-Value="Paragraphs.Font.LineHeight" min="1" />
                                    Base Line Height (%)
                                </label>
                            </div>
                        </div>
                        <Preview Kit=kit.Kit>
                            <div>
                                <label>Body Large - Font Size: @BodyScale("500")</label>
                                <p class="large">@previewTextBody</p>
                            </div>
                            <div>
                                <label>Body - Font Size: @BodyScale("400")</label>
                                <p class="medium">@previewTextBody</p>
                            </div>
                            <div>
                                <label>Body Small - Font Size: @BodyScale("300")</label>
                                <p class="small">@previewTextBody</p>
                            </div>
                        </Preview>
                    </section>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string? kitId { get; set; }

    (Kit Kit, KitRevision Revision) kit;
    Kodekit.Models.Elements.Typography? Headings;
    Kodekit.Models.Elements.Typography? Paragraphs;
    EditContext? ContextHeadings;
    EditContext? ContextParagraphs;
    Dictionary<string, string>? HeadingTypeScaleValues;
    Dictionary<string, string>? ParagraphTypeScaleValues;

    private string previewText = "The power of small steps";
    private string previewTextBody = "What you do makes a difference. \nAnd you have to decide what kind of difference you want to make.";
    FontListResponse Fonts;
    private string ToggleOption = "hide";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Fonts = await ElementRepository.GetGoogleFontsAsync("");
    }

    protected async Task<(Kit Kit, KitRevision Revision)> GetAsync()
    {
        kit = await KitRepository.GetCurrentAsync(kitId);
        Headings = kit.Revision.Headings;
        Paragraphs = kit.Revision.Paragraphs;
        ContextHeadings = new EditContext(kit.Revision.Headings);
        ContextParagraphs = new EditContext(kit.Revision.Paragraphs);
        HeadingTypeScaleValues = Headings.Serialize();
        ParagraphTypeScaleValues = Paragraphs.Serialize();
        return kit;
    }

    protected async Task UpdateAsync((Kit Kit, KitRevision Revision) kit)
    {
        await KitRepository.UpdateAsync(kit.Kit.Id, kit.Revision.Id);
    }

    private string HeadingScale(string scale)
    {
        return HeadingTypeScaleValues.ContainsKey($"type-{scale}") == true
            ? HeadingTypeScaleValues[$"type-{scale}"]
            : string.Empty;
    }

    private string BodyScale(string scale)
    {
        return ParagraphTypeScaleValues.ContainsKey($"type-{scale}") == true
            ? ParagraphTypeScaleValues[$"type-{scale}"]
            : string.Empty;
    }

    private async Task Overrides(string type, string value)
    {
        if (Headings.FontSizeOverrides == null)
            Headings.FontSizeOverrides = new Dictionary<string, string>();

        Headings.FontSizeOverrides[type] = value;
        await UpdateAsync(kit);
    }

    private string SetValue(string typeValue)
    {
        if (Headings.FontSizeOverrides == null)
            return "";

        if(Headings.FontSizeOverrides.ContainsKey(typeValue))
        {
            return Headings.FontSizeOverrides[typeValue];
        } else
        {
            return "";
        }
    }

    private void Toggle()
    {
        if(ToggleOption == "hide")
        {
            ToggleOption = "show";            
        } else
        {
            ToggleOption = "hide";
        }         
    }
}