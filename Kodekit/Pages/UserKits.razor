@* @rendermode InteractiveAuto *@
@implements IDisposable
@layout SimplifiedLayout
@page "/"

<div class="dashboard page">
    <div class="page__container">
        @if (!IsLoading)
        {
            <header class="dashboard--header">
                <p class="user">@if(User != null) @User.FirstName</p>
                <h2>My Kits</h2>
                <p class="subheader">View and manage your kits for your projects.</p>
                <div class="right">
                    @*                <select class="sort">
                <option @onclick="@(e => Sort("date-mod"))">Recently Updated</option>
                </select>*@
                    @* <AuthorizeView>
                        <Authorized> *@
                            <button @onclick="CreateNew">
                                Add New Kit  +
                            </button>
                        @* </Authorized>
                        <NotAuthorized> *@
                            @if (Kits == null || !Kits.Any())
                            {
                                <button @onclick="CreateNew">
                                    Add New Kit  +
                                </button>
                            }
                        @* </NotAuthorized>
                    </AuthorizeView> *@
                </div>
            </header>

            @if (Kits == null || !Kits.Any())
            {
                <p>Create a new styleguide to get started!</p>
            }
            else
            {
                <div class="dashboard-container">
                    @foreach (var kit in Kits)
                    {
                        <KitCard Kit="kit" />
                    }
                </div>
            }
        }
    </div>
</div>

@inject IConfiguration Config
@inject PersistentComponentState ApplicationState

@code {
    private User? User;
    private ICollection<Kit>? Kits;
    bool IsLoading;
    //System.Security.Claims.ClaimsPrincipal? authUser;

    string? _kitId;
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistKodekitId);

        if (ApplicationState.TryTakeFromJson<string>("kitId", out var kitId))
        {
            _kitId = kitId;
        } else
        {
            //var kit = await KitRepository.CreateKitAsync(User != null ? User.Id : "");
            //var kit = await KitRepository.CreateKitAsync(User != null ? "1f09f061-932a-40a4-a482-6d802786e4b7" : "");
            var kit = await KitRepository.GetKitAsync("durbars-noncircumspectly");
            _kitId = kit.KitId;
        }
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     IsLoading = true;
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;
    //     authUser = user;

    //     persistingSubscription = ApplicationState.RegisterOnPersisting(PersistKodekitId);

    //     if (ApplicationState.TryTakeFromJson<string>("kitId", out var kitId))
    //     {
    //         _kitId = kitId;
    //     }
    //     else
    //     {
    //         Console.WriteLine(User);
    //         var kit = await KitRepository.CreateKitAsync(User != null ? User.Id : "");
    //         _kitId = kit.KitId;
    //     }
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (authUser.Identity != null && authUser.Identity.IsAuthenticated)
    //     {
    //         User = await UserRepository.GetUserAsync();
    //         Kits = await KitRepository.GetUserKitsAsync(User.Id);

    //         // To import an existing kit into your account after first login
    //         //string result = await localStorage.GetItemAsync<string>("kodekitId");
    //         if (_kitId != null)
    //             await CaptureExistingKit(_kitId);
    //     }
    //     else
    //     {
    //         Kits = new List<Kit>();
    //         //string result = await localStorage.GetItemAsync<string>("kodekitId");
    //         if (_kitId != null)
    //             GoToKit(_kitId);
    //         else
    //             await CreateNew();
    //     }
    //     IsLoading = false;
    // }

    private Task PersistKodekitId()
    {
        ApplicationState.PersistAsJson("kitId", _kitId);
        Console.WriteLine(_kitId);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }


    private async Task CreateNew()
    {
        var kit = await KitRepository.CreateKitAsync(User != null ? User.Id : "");
        // await localStorage.SetItemAsStringAsync("kodekitId", kit.KitId);
        _kitId = kit.KitId;
        await PersistKodekitId();
        GoToKit(_kitId);
    }

    private async Task CaptureExistingKit(string id)
    {
        var existingKit = await KitRepository.GetKitAsync(id);
        if (Kits != null)
        {
            if (Kits.Any(x => x.Id == existingKit.Id))
                return;
            if (string.IsNullOrWhiteSpace(existingKit?.UserId))
            {
                if (existingKit != null)
                {
                    await KitRepository.UpdateAsync(existingKit.Id, existingKit.Name, existingKit.UserId, existingKit.IsAutoPublish ?? false);
                    Kits.Add(existingKit);
                }
            }
        }
    }

    private void Sort(string filter)
    {
        if (filter == "date-mod")
        {
            if (Kits != null) Kits = Kits.OrderByDescending(x => x.DateModified).ToList();
        }
    }

    private void GoToKit(string kit)
    {
        Nav.NavigateTo($"/{kit}/introduction");
    }
}