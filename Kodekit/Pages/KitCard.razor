<div tabindex="0" class="kit-card">
    <header class="kit-card--header">
        <h3 @onclick="@(e => GoToKit(Kit.Id))">@Kit.KitId</h3>
        <div class="kit-info">
            <AuthorizeView>
                <Authorized>
                    <span class="last-saved">
                        Last Saved: @Kit.DateModified.ToString("MM/dd/yyyy hh:mm tt")
                    </span>

                    <div class="kit-actions">
                        <button>
                            <PreviewIcon />
                        </button>
                        <a href="@($"{Config["ApiUrl"]}/{Kit.KitId}.css")" title="Download" target="_blank">
                            <DownloadIcon />
                        </a>
                        <button class="delete-kit" @onclick="@(e => ShowDeleteModal(Kit.Id))">
                            <DeleteIcon />
                        </button>
                        <button>
                            <MoreIcon />
                         </button>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <span class="last-saved">
                        Please <a href="authentication/login">Log In</a> to save changes
                    </span>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </header>
    <div class="kit-card--preview preview-@Kit.Id">
        <style type="text/css">
            @@import url('@CssUrl(Kit)');
        </style>
        <div class="style typography">
            <label>Typography</label>
            @if (Typography != null)
            {
                <div class="typography--preview">
                    <h5 style="font-family: '@Typography.Heading?.FontFamily'; ">Heading/H5/@Typography.Heading?.FontFamily</h5>
                    <p style="font-family: '@Typography.Paragraph?.FontFamily'; ">Body/Regular/@Typography.Paragraph?.FontFamily</p>
                </div>
            }
        </div>
        <div class="preview--divider"></div>
        <div class="style colors">
            <label>Brand Colors</label>
            <div class="colors--preview">
                <ColorBlotch Hex="primary-500" />
                <ColorBlotch Hex="secondary-500" />
                <ColorBlotch Hex="tertiary-500" />
            </div>
        </div>
        <div class="preview--divider"></div>
        <div class="style colors">
            <label>Grayscale</label>
            <div class="colors--preview">
                <ColorBlotch Hex="grey-100" />
                <ColorBlotch Hex="grey-900" />
            </div>
        </div>
        <div class="preview--divider"></div>
        <div class="style colors">
            <label>System Color</label>
            <div class="colors--preview">
                <ColorBlotch Hex="error-500" />
                <ColorBlotch Hex="warning-500" />
                <ColorBlotch Hex="success-500" />
            </div>
        </div>
    </div>
</div>
<DeleteKitModal Show="@Show" CloseModal="CloseModal" Kit="@Kit" SelectedKit="@SelectedVersion" />

@inject IConfiguration Config
@code {
    [Parameter]
    public Kit? Kit { get; set; }

    GetTypographyResponse? Typography { get; set; }
    string headingFontCss = "";
    string paragraphFontCss = "";
    string Show = "";
    string SelectedVersion = "";

    protected override async Task OnInitializedAsync()
    {
        if (Kit != null) Typography = await ElementRepository.GetTypographyAsync(Kit.Id);
    }

    private string CssUrl(Kit kit) => Config["ApiUrl"] + $"/{kit.Id}.css?scope=preview-{kit.Id}";

    private void GoToKit(string kit)
    {
        Nav.NavigateTo($"/{kit}/introduction");
    }

    private void ShowDeleteModal(string selected)
    {
        SelectedVersion = selected;
        Show = "active";
    }

    private void CloseModal()
    {
        Show = "";
    }
}