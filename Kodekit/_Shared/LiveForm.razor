@implements IDisposable

@code {
    [Parameter] public string kitId { get; set; } = "";
    protected Kit? kit;
    protected EditContext? Context;
    protected bool DebounceInputs;

    System.Timers.Timer fieldChangedTimer = null!;

    protected override async Task OnInitializedAsync()
    {
        kit = await KitRepository.GetAsync(kitId);
        Context = new EditContext(kit);
        Context.OnFieldChanged += HandleFieldChanged;

        if (DebounceInputs)
        {
            fieldChangedTimer = new System.Timers.Timer(300);
            fieldChangedTimer.Elapsed += Update;
            fieldChangedTimer.AutoReset = false;
        }
    }

    protected async void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (DebounceInputs)
        {
            fieldChangedTimer.Stop();
            fieldChangedTimer.Start();
        }
        else
        {
            kit = await UpdateAsync();
            StateHasChanged();
        }
    }

    protected void Update(object? source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(async () => 
        {
            kit = await UpdateAsync();
            StateHasChanged();
        });
    }

    protected virtual async Task<Kit> UpdateAsync()
    {
        await KitRepository.UpdateAsync(kit!);
        return kit!;
    }

    void IDisposable.Dispose()
    {
        fieldChangedTimer?.Dispose();
    }
} 