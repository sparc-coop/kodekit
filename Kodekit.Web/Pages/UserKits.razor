@layout SimplifiedLayout
@page "/"

<div class="dashboard page">
    <div class="page__container">
        <div class="dashboard--header">
            <h2>Your Styleguides</h2>
            <div class="right">
                <select class="sort">
                    <option @onclick="@(e => Sort("date-mod"))">Recently Updated</option>
                </select>
                <AuthorizeView>
                    <Authorized>
                        <button @onclick="@(CreateNew)">
                            New Styleguide
                            <img src="/images/add-icon.svg" />
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        @if (Kits != null && !Kits.Any())
                        {
                            <button @onclick="@(CreateNew)">
                                New Styleguide
                                <img src="/images/add-icon.svg" />
                            </button>
                        }
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>

        @if (Kits == null || !Kits.Any())
        {
            <p>Create a new styleguide to get started!</p>
        }
        else
        {
            <div class="dashboard-container">
                @foreach (var kit in Kits)
                {
                    <a href="/@kit.Id/introduction" class="dashboard-card">
                        <img src="/images/dash-icon.svg" alt="Dashboard Icon" />
                        <div>
                            <div class="title">Project Name</div>
                            <div class="date">
                                Last Updated:
                                @(kit.ModifiedDate != null ? kit.ModifiedDate.Value.ToString("MM/dd/yyyy")
                        : kit.DateCreated != null ? kit.DateCreated.Value.ToString("MM/dd/yyyy") : "")
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
    </div>
</div>

@code {
    private User User;
    private ICollection<Kit> Kits;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            User = await Api.GetUserAsync();
            Kits = await Api.GetUserKitsAsync();
        }
        else
        {
            Kits = new List<Kit>();
            string result = await localStorage.GetItemAsync<string>("kodekitId");
            if (result != null)
                Kits.Add(await PublicApi().GetKitAsync(result));
        }
    }

    private async Task CreateNew()
    {
        var kit = await PublicApi().CreateKitAsync(User != null ? User.Id : "");
        await localStorage.SetItemAsStringAsync("kodekitId", kit.KitId);
        Nav.NavigateTo($"/{kit.KitId}/introduction");
    }

    private void Sort(string filter)
    {
        if (filter == "date-mod")
        {
            Kits = Kits.OrderByDescending(x => x.ModifiedDate).ToList();
        }
    }
}