@layout SimplifiedLayout
@page "/my-kits"
@attribute [Authorize]

<div class="dashboard page">
    <div class="page__container">
        <div class="dashboard--header">
            <h2>Your Styleguides</h2>
            <div class="right">
                <select class="sort">
                    <option @onclick="@(e => Sort("date-mod"))">Recently Updated</option>
                </select>
                <button @onclick="@(CreateNew)">
                    New Styleguide
                    <img src="/images/add-icon.svg" />
                </button>
            </div>
        </div>

        @if (Kits == null)
        {
            <p>Create a new kit to get started!</p>
        }
        else
        {
            <div class="dashboard-container">
                @foreach (var kit in Kits)
                {
                    <a href="kits/@kit.KitId" class="dashboard-card">
                        <img src="/images/dash-icon.svg" alt="Dashboard Icon"/>
                        <div>
                            <div class="title">Project Name</div>
                            <div class="date">Last Updated:
                             @(kit.ModifiedDate != null ? kit.ModifiedDate.Value.ToString("MM/dd/yyyy") 
                                : kit.DateCreated != null ? kit.DateCreated.Value.ToString("MM/dd/yyyy") : "")
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
    </div>
</div>

@code {
    private User User;
    private ICollection<Kit> Kits;

    protected override async Task OnInitializedAsync()
    {
        User = await Api.GetUserAsync();
        Kits = await Api.GetUserKitsAsync();
    }

    private async Task CreateNew()
    {
        Kit newKit = new Kit();
        newKit.UserId = User.UserId;
        newKit.Id = (await PublicApi().CreateKitAsync()).KitId;
        Nav.NavigateTo($"/{newKit.KitId}/typography/");
    }

    private void Sort(string filter)
    {
        if(filter == "date-mod")
        {
            Kits = Kits.OrderByDescending(x => x.ModifiedDate).ToList();
        }
    }
}