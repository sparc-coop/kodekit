@inherits HighlightPageBase
@page  "/{kitId}/dropdowns"

<div class="dropdowns page">
    <div class="page__container">
        <header>
            <div class="title">Elements</div>
            <h2>Dropdowns</h2>
            <p>
                Use to select from a series of choices.
            </p>
        </header>
        <div class="content">
            <h3>Dropdown Styling</h3>
            <p class="subheader">
                The &lt;select&gt; element defines a dropdown list. The &lt;option&gt; elements define options that can be selected. To define a pre-selected option, add the selected attribute to the option.
            </p>
            <aside>This element inherits direct styling from <a href="@($"/{kitId}/inputs")">Inputs & Textareas</a> as defaults.</aside>
            <div class="section-container">
@*                <label class="switch">
                    <input type="checkbox" bind=Model.OverwriteInherited>
                    <span class="slider"></span>
                </label>
                Overwrite inherited styling*@
            </div>
            @if (Model != null)
            {
                <EditForm Model="@Model">
                    <div class="section">
                        <label>
                            Font Size (px)
                            <InputNumber @bind-Value="Model.FontSize" @oninput="Submit" min="1" class="small"/>
                        </label>
                        <label>
                            Font Weight
                           <FontWeights @bind-Value=Model.FontWeight @bind-Value:event="OnValueChanged"/>
                        </label>
                        <label>
                            Vertical Padding (px)
                            <InputNumber @bind-Value="Model.VerticalPadding" @oninput="Submit" min="0" class="small"/>
                        </label>
                    </div>
                    <div class="section">
                        <label>
                            Horizontal Padding (px)
                            <InputNumber @bind-Value="Model.HorizontalPadding" @oninput="Submit" min="0" class="small" />
                        </label>
                        <label>
                            Corner Radius (px)
                            <InputNumber @bind-Value="Model.CornerRadius" @oninput="Submit" min="0" class="small" />
                        </label>
                        <label>
                            Border Width (px)
                            <InputNumber @bind-Value="Model.BorderWidth" @oninput="Submit" min="0" class="small" />
                        </label>
                    </div>

                    <div class="preview-example">
                        @for (int i = 1; i < 5; i++)
                        {
                            <select style="font-size: @(Model.FontSize)px; font-weight: @Model.FontWeight;
                                        padding: @(Model.VerticalPadding)px @(Model.HorizontalPadding)px; 
                                        border-radius: @(Model.CornerRadius)px; border: @(Model.BorderWidth)px solid #D2D4D9">
                                <option selected>Dropdown Menu</option>
                                <option>Default Row</option>
                                <option>Default Row</option>
                                <option>Default Row</option>
                            </select>
                        }
                    </div>
                    <pre>
                    <code class="language-html">
&lt;select&gt;
    &lt;option selected&gt;Dropdown Menu&lt;/option&gt;
    &lt;option&gt;Default Row&lt;/option&gt;
    &lt;option&gt;Default Row&lt;/option&gt;
    &lt;option&gt;Default Row&lt;/option&gt;
&lt;/select&gt;
                        </code>
                    </pre>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
        [Parameter] public string kitId { get; set; }
        UpdateDropdownsModel Model;

    protected override async Task OnInitializedAsync()
    {
        Model = await PublicApi().GetDropdownsAsync(kitId);
    }

    private async Task Submit()
    {
        await PublicApi().UpdateDropdownsAsync(Model);
    }
}
