@inherits HighlightPageBase
@page  "/typography"
@page  "/typography/{kitId}"



<style type="text/css" scoped>
      @@import url('@importUrl');
</style>

<div class="typography page">
    <div class="page__container">
        <header>
            <div class="title">Base Styles</div>
            <h2>Typography</h2>
            <p>
                When working with typography, using a type scale can help keep a subtle rhythm throughout your designs.
            </p>
        </header>
        <div class="content">
            <h3>Heading Settings</h3>
            <p>
                When working with typography, using a type scale can help keep a subtle rhythm throughout your designs.
            </p>
            @if (kit != null)
            {
                <EditForm Model="@kit">
                    <div class="section">
                        <label>
                            Preview Text
                            <input @bind-value="previewText" @bind-value:event="oninput" class="large" />
                        </label>
                        <label>
                            Choose heading font
                            <select class="medium" @onchange='args => SelectFonts(args, "head")'>
                                @if (fontList.Items != null)
                                {
                                    @foreach (var font in fontList.Items)
                                    {
                                        <option value="@font.Family">@font.Family</option>
                                    }
                                }
                            </select>
                        </label>
                        <label>
                            Base Font Size (px)
                            <InputText @bind-Value="kit.HeaderFontSize" class="small" />
                        </label>
                        <label>
                            Choose a Type Scale
                            <select class="medium">
                                <option selected>1.250 (Major Third)</option>
                            </select>
                        </label>
                        <label>
                            Line Height
                            <InputText @bind-Value="kit.HeaderLineHeight" class="small" />
                        </label>
                    </div>
                    <div class="preview-example" style="font-family: '@headingFont.Family';">
                        <div>
                            <h1 style="font-family: '@headingFont.Family';">@previewText</h1>
                            <label>H1 - Font Size: 48px (3em) / Line Height: 120%</label>
                        </div>
                        <div>
                            <h2 style="font-family: '@headingFont.Family';">@previewText</h2>
                            <label>H2 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h3 style="font-family: '@headingFont.Family';">@previewText</h3>
                            <label>H3 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h4 style="font-family: '@headingFont.Family';">@previewText</h4>
                            <label>H4 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h5 style="font-family: '@headingFont.Family';">@previewText</h5>
                            <label>H5 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h6 style="font-family: '@headingFont.Family';">@previewText</h6>
                            <label>H6 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <p style="font-family: '@headingFont.Family';">@previewText</p>
                            <label>Subtitle - Font Size: xxpx (xem)</label>
                        </div>
                    </div>
<pre>
<code>
&lt;h1&gt;The power of small steps&lt;/h1&gt;
&lt;h2&gt;The power of small steps&lt;/h2&gt;
&lt;h3&gt;The power of small steps&lt;/h3&gt;
&lt;h4&gt;The power of small steps&lt;/h4&gt;
&lt;h5&gt;The power of small steps&lt;/h5&gt;
&lt;span class="subtitle"&gt;The power of small steps&lt;/span&gt;
&lt;!-- combine with other HTML elements --&gt;
&lt;h1&gt;The power of small steps&lt;/h1&gt;
&lt;h1&gt;&lt;strong&gt;The power of small steps&lt;/strong&gt;&lt;h1&gt;
</code>
</pre>
                    <h3>Paragraph Settings</h3>

                    <div class="section">
                        <label class="preview">
                            Preview Text
                            <textarea @bind-value="previewTextBody" @bind-value:event="oninput" />
                        </label>
                        <label>
                            Choose Body font
                            <select class="medium" @onchange='args => SelectFonts(args, "body")'>
                                @if (fontList.Items != null)
                                {
                                    @foreach (var font in fontList.Items)
                                    {
                                        <option value="@font.Family">@font.Family</option>
                                    }
                                }

                            </select>
                        </label>
                        <label>
                            Base Font Size (px)
                            <InputText @bind-Value="kit.BodyFontSize" class="small" />
                        </label>
                        <label>
                            Choose a Type Scale
                            <select class="medium">
                                <option selected>1.250 (Major Third)</option>
                            </select>
                        </label>
                        <label>
                            Line Height
                            <InputText @bind-Value="kit.BodyLineHeight" class="small" />
                        </label>
                    </div>
                    <div class="preview-example preview-example--body" style="font-family: '@bodyFont.Family';">
                        <div>
                            <p class="large" style="font-family: '@bodyFont.Family';">@previewTextBody</p>
                            <label>Body Large - Font Size: xxpx (xem) / Line Height: 160%</label>
                        </div>
                        <div>
                            <p class="medium" style="font-family: '@bodyFont.Family';">@previewTextBody</p>
                            <label>Body - Font Size: xxpx (xem) / Line Height: 160%</label>
                        </div>
                        <div>
                            <p class="small" style="font-family: '@bodyFont.Family';">@previewTextBody</p>
                            <label>Body Small - Font Size: xxpx (xem) / Line Height: 160%</label>
                        </div>
                    </div>
                    <pre>
                    <code>
    &lt;p class="sub-title"&gt;What you do makes a difference. And you have to decide what kind of difference you want to make.&lt;/p&gt;
    &lt;p&gt;What you do makes a difference. And you have to decide what kind of difference you want to make.&lt;/p&gt;
    &lt;p class="disclaimer"&gt;What you do makes a difference. And you have to decide what kind of difference you want to make.&lt;/h3&gt;
    &lt;!-- combine with other HTML elements --&gt;
    &lt;h1&gt;&lt;strong&gt;What you do makes a difference. And you have to decide what kind of difference you want to make.&lt;/strong&gt;&lt;h1&gt;
                        </code>
                    </pre>
                    <button @onclick="Submit">
                        Save & Continue
                        <img src="/images/eyecon.svg" />
                    </button>
                </EditForm>
            }
        </div>
    </div>
</div>

@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@code {
    private Kit kit = new Kit();
    private User User;
    [Parameter] public string kitId { get; set; }
    string currentKitId;
    private string previewText = "The power of small steps";
    private string previewTextBody = "What you do makes a difference. And you have to decide what kind of difference you want to make.";
    private List<Font> fonts = new List<Font>();
    FontListResponse fontList = new FontListResponse();
    string FontUrl = "test";
    Font headingFont = new Font();
    Font bodyFont = new Font();
    string importUrl = "";

    protected override async Task OnInitializedAsync()
    {
        kit.HeaderFontSize = "16";
        kit.HeaderLineHeight = "120%";
        kit.BodyFontSize = "16";
        kit.BodyLineHeight = "120%";

        await GetKit();
        await GetUser();

        bodyFont.Family = "Roboto Mono";
        headingFont.Family = "Open Sans";

        var fontSelection = await localStorage.GetItemAsync<FontListResponse>("googleFonts");

        if (fontSelection != null)
        {
            fontList = fontSelection;
        }
        else
        {
            fontList = await Api.GoogleFontsAsync("");
            await localStorage.SetItemAsync<FontListResponse>("googleFonts", fontList);
        }






    }

    private async Task Submit()
    {
        Kit newKit = new Kit();
        if (User != null)
        {
            newKit.UserId = User.Id;
        }

        newKit.HeaderFontSize = kit.HeaderFontSize;

        if (kit.Id != null)
        {
            newKit.ParentId = kit.Id;
        }

        kit = await PublicApi().CreateKitAsync(newKit);

        //save to local storage
        if (currentKitId == null) { currentKitId = kit.Id; }
        await localStorage.SetItemAsync("kodekitId", currentKitId);

        Nav.NavigateTo("/Colors/" + kit.Id);
    }

    private async Task GetKit()
    {
        //get from local storage
        string result = await localStorage.GetItemAsync<string>("kodekitId");
        currentKitId = result;

        if (kitId != null)
        {
            kit = await Api.GetKitAsync(currentKitId);
        }
        else if (currentKitId != null)
        {
            kit = await Api.GetKitAsync(currentKitId);
        }
    }

    private async Task GetUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            User = await Api.GetUserAsync();
        }
    }

    void SelectFonts(ChangeEventArgs e, string type)
    {
        @if (type == "head")
        {
            headingFont.Family = e.Value.ToString();
        }
        else
        {
            bodyFont.Family = e.Value.ToString();
        }


        importUrl = "https://fonts.googleapis.com/css?family=" + bodyFont.Family.Replace(" ", "+") + "|" + headingFont.Family.Replace(" ", "+");


        StateHasChanged();

    }

    //void SelectFonts(ChangeEventArgs e)
    //{
    //    bodyFont.Family = e.Value.ToString();

    //    importUrl = "https://fonts.googleapis.com/css?family=" + bodyFont.Family.Replace(" ", "+");


    //    StateHasChanged();

    //}

    //private class Font {
    //    private string Family { get; set; }
    //}
}

