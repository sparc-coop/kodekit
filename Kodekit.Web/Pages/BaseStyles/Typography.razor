@inherits HighlightPageBase
@page "/{kitId}/typography"

<div class="typography page">
    <div class="page__container">
        <header>
            <div class="title">Base Styles</div>
            <h2>Typography</h2>
            <p>
                When working with typography, using a type scale can help keep a subtle rhythm throughout your designs.
            </p>
        </header>
        <div class="content">
            <!-- Accessibility Checker -->
            <h3>Heading Settings</h3>

            @if (Model != null)
            {
                <EditForm Model="@Model">
                    <div class="section">
                        <label>
                            Preview Text
                            <input @bind-value="previewText" @bind-value:event="oninput" class="large" />
                        </label>
                        <label>
                            Heading Font
                            @if (Fonts.Items != null)
                            {
                                <select class="medium" @bind=Model.Heading.FontFamily>
                                    @foreach (var font in Fonts.Items)
                                    {
                                        <option value="@font.Family">
                                            @font.Family
                                        </option>
                                    }
                                </select>
                            }
                        </label>
                        <label>
                            Default Heading Weight
                            <FontWeights @bind-Value="Model.Heading.FontWeight" />
                        </label>

                        <label>
                            Base Font Size (px)
                            <InputNumber @bind-Value="Model.Heading.FontSize" class="small" />
                        </label>
                        <label>
                            Choose a Type Scale
                            <select class="medium" @bind=Model.Heading.TypeScale>
                                @foreach (var scale in Model.TypeScales)
                                {
                                    <option value="@scale.Key">
                                        @scale.Key (@scale.Value)
                                    </option>
                                }
                            </select>
                        </label>
                        <label>
                            Base Line Height (px)
                            <InputNumber @bind-Value="Model.Heading.LineHeight" class="small" />
                        </label>
                    </div>
                    <div class="preview-example">
                        <div>
                            <h1>@previewText</h1>
                            <label>H1 - Font Size: 48px (3em) / Line Height: 120%</label>
                        </div>
                        <div>
                            <h2>@previewText</h2>
                            <label>H2 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h3>@previewText</h3>
                            <label>H3 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h4>@previewText</h4>
                            <label>H4 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h5>@previewText</h5>
                            <label>H5 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <h6>@previewText</h6>
                            <label>H6 - Font Size: xxpx (xem)</label>
                        </div>
                        <div>
                            <p>@previewText</p>
                            <label>Subtitle - Font Size: xxpx (xem)</label>
                        </div>
                    </div>
                    <pre>
        <code>
&lt;h1&gt;@(previewText)&lt;/h1&gt;
&lt;h2&gt;@(previewText)&lt;/h2&gt;
&lt;h3&gt;@(previewText)&lt;/h3&gt;
&lt;h4&gt;@(previewText)&lt;/h4&gt;
&lt;h5&gt;@(previewText)&lt;/h5&gt;
&lt;h6&gt;@(previewText)&lt;/h6&gt;
&lt;span class="subtitle"&gt;@(previewText)&lt;/span&gt;

&lt;!-- combine with other HTML elements --&gt;
&lt;h1&gt;@(previewText)&lt;/h1&gt;
&lt;h1&gt;&lt;strong&gt;@(previewText)&lt;/strong&gt;&lt;h1&gt;
    </code>
            </pre>
                    <h3>Paragraph Settings</h3>

                    <div class="section">
                        <label class="preview" style="margin-right: 32px;">
                            Preview Text
                            <textarea @bind-value="previewTextBody" @bind-value:event="oninput" />
                        </label>
                        <label>
                            Choose Body font
                            <select class="medium" @bind=Model.Paragraph.FontFamily>
                                @if (Fonts.Items != null)
                                {
                                    @foreach (var font in Fonts.Items)
                                    {
                                        <option value="@font.Family">
                                            @font.Family
                                        </option>
                                    }
                                }
                            </select>
                        </label>
                        <label>
                            Base Font Size (px)
                            <InputNumber @bind-Value="Model.Paragraph.FontSize" class="small" />
                        </label>
                        <label>
                            Choose a Type Scale
                            <select class="medium" @bind=Model.Paragraph.TypeScale>
                                @foreach (var scale in Model.TypeScales)
                                {
                                    <option value="@scale.Key">
                                        @scale.Key (@scale.Value)
                                    </option>
                                }
                            </select>
                        </label>
                        <label>
                            Base Line Height (px)
                            <InputNumber @bind-Value="Model.Paragraph.LineHeight" class="small" />
                        </label>
                    </div>
                    <div class="preview-example preview-example--body">
                        <div>
                            <p class="large">@previewTextBody</p>
                            <label>Body Large - Font Size: xxpx (xem) / Line Height: 160%</label>
                        </div>
                        <div>
                            <p class="medium">@previewTextBody</p>
                            <label>Body - Font Size: xxpx (xem) / Line Height: 160%</label>
                        </div>
                        <div>
                            <p class="small">@previewTextBody</p>
                            <label>Body Small - Font Size: xxpx (xem) / Line Height: 160%</label>
                        </div>
                    </div>
                    <pre>
                    <code>
&lt;p class="sub-title"&gt;
    @(previewTextBody)
&lt;/p&gt;
&lt;p&gt;
    @(previewTextBody)
&lt;/p&gt;
&lt;p class="disclaimer"&gt;
    @(previewTextBody)
&lt;/p&gt;
&lt;!-- combine with other HTML elements --&gt;
&lt;h1&gt;
    &lt;strong&gt;
        @(previewTextBody)
    &lt;/strong&gt;
&lt;h1&gt;
                                    </code>
                                </pre>
                    <SaveAndContinue OnSubmit=Submit NextPage="colors" />
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string kitId { get; set; }
    private string previewText = "The power of small steps";
    private string previewTextBody = "What you do makes a difference. And you have to decide what kind of difference you want to make.";
    FontListResponse Fonts;
    GetTypographyResponse Model;

    protected override async Task OnInitializedAsync()
    {
        Fonts = await PublicApi().GetGoogleFontsAsync("");
        Model = await PublicApi().GetTypographyAsync(kitId);
    }

    private async Task Submit()
    {
        var result = new UpdateTypographyModel
        {
            KitId = kitId,
            Headings = Model.Heading,
            Paragraphs = Model.Paragraph
        };

        await PublicApi().UpdateTypographyAsync(result);
    }
}

