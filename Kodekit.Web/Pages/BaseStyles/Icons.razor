@inherits HighlightPageBase
@page  "/icons"
@page  "/icons/{kitId}"

<style type="text/css" scoped>
      @@import url('@icon.Url');
</style>

<div class="effects page">
    <div class="page__container">
        <header>
            <div class="title">Base Styles</div>
            <h2>Icons</h2>
            <p>
                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus.
            </p>
        </header>
        <div class="content">
            <h3>Icon Sets</h3>
            <p class="subheader">
                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus.
            </p>
            @if (kit != null)
            {
        <EditForm Model="@kit">
            <section>
                <label>
                    Icon Set
                    <select @onchange="@SelectIcons">
                        <option>Select:</option>
                        <option value="Material">Material</option>
                        <option value="Remix">Remix</option>
                        <option value="CSS">CSS</option>
                        <option value="FontAwesome">FontAwesome</option>
                    </select>
                </label>
                @*@if (icon.Name == "Material" || icon.Name == "Remix")
            {
                <label>
                    Set Variation
                    <select @onchange="@(args => {icon.Type = args.Value.ToString(); StateHasChanged();})">
                        <option value="Solid">Solid</option>
                        <option value="Outline">Outline</option>
                    </select>
                </label>
            }*@

            </section>
            <div class="preview-example">
                @((MarkupString)icon.Markup)
            </div>
            <br />
                <pre><code class="language-html">
    &lt;!-- Material --&gt; &lt;span class='material-icons'&gt;home&lt;/span&gt;
    &lt;!-- Remix --&gt; &lt;i class='ri-home-line'&gt;&lt;/i&gt;
    &lt;!-- CSS --&gt; &lt;i class='gg-home'&gt;&lt;/i&gt;
    &lt;!-- FontAwesome --&gt; &lt;i class='fas fa-home'&gt;&lt;/i&gt;
</code></pre>



            <button @onclick="Submit">
                Save & Continue
                <img src="/images/eyecon.svg" alt="Kodekit Eye Logo" />
            </button>
        </EditForm>
            }
        </div>
    </div>
</div>

@inject IJSRuntime JS
@code {
    private Kit kit = new Kit();
    [Parameter] public string kitId { get; set; }
    string currentKitId;
    string importUrl = "";
    IconLibrary icon = new IconLibrary();

    protected override async Task OnInitializedAsync()
    {
        await GetKit();

        //icon.Name = "Material";

        //icon.Url = "https://fonts.googleapis.com/icon?family=Material+Icons";
        //icon.Markup = "<span class='material-icons'>home</span>";
        //icon.Type = "Solid";
    }

    private async Task GetKit()
    {
        //get from local storage
        string result = await localStorage.GetItemAsync<string>("kodekitId");
        currentKitId = result;

        if (kitId != null)
        {
            kit = await PublicApi().GetKitAsync(currentKitId);
        }
        else if (currentKitId != null)
        {
            kit = await PublicApi().GetKitAsync(currentKitId);
        }
    }

    private async Task Submit()
    {
        await PublicApi().UpdateKitAsync(kit);
        Nav.NavigateTo("/buttons/" + kit.KitId);
    }

    async Task SelectIcons(ChangeEventArgs e)
    {
        var materialUrl = ""; // commenting out due to existing script in index "https://fonts.googleapis.com/icon?family=Material+Icons";
        var remixUrl = "https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css";
        var cssUrl = "https://css.gg/css";
        var fontAwesomeUrl = "https://use.fontawesome.com/releases/v5.15.4/css/all.css";

        icon.Name = e.Value.ToString();

        switch (icon.Name)
        {
            case "Material":
                icon.Url = materialUrl;
                icon.Markup = "<span class='material-icons'>home</span>";
                break;
            case "Remix":
                icon.Url = remixUrl;
                icon.Markup = "<i class='ri-home-line'></i>";
                break;
            case "CSS":
                icon.Url = cssUrl;
                icon.Markup = "<i class='gg-home'></i>";
                break;
            case "FontAwesome":
                icon.Url = fontAwesomeUrl;
                icon.Markup = "<i class='fas fa-home'></i>";
                break;

                //default:
                //    icon.Url = icon.Url;
                //    icon.Markup = icon.Markup;
                //    break;
        }

        StateHasChanged();
        //await JS.InvokeVoidAsync("showHighlight");


    }

    public class IconLibrary
    {
        public string Name { get; set; }
        public string Url { get; set; }
        public string Markup { get; set; }
        public string Type { get; set; }
    }
}
