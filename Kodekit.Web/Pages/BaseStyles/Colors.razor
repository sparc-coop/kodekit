@inherits HighlightPageBase<ColorsModel>
@page "/{kitId}/colors"

<div class="colors page">
    <div class="page__container">
        <header>
            <div class="title">Base Styles</div>
            <h2>Colors</h2>
            <p>
                Colors selected here will be applied throughout the kit. They will be
                applied to their respective elements (such as primary and secondary buttons)
                &amp; system colors, as well as accessed via css variables.
            </p>
        </header>
        <div class="content">
            <!-- Contrast Checker Component Here -->
            <header>
                <h3>Brand Colors</h3>
                <p>
                    The brand colors are the three main colors that will be used to accent your site.
                </p>
            </header>

            @if (Model != null)
            {
                <EditForm EditContext="@Context">
                    <div class="section">
                        <label>
                            Primary
                            <InputColor @bind-Value="Model.Primary" />
                        </label>

                        <label>
                            Secondary
                            <InputColor @bind-Value="Model.Secondary" />
                        </label>
                        <label>
                            Tertiary
                            <InputColor @bind-Value="Model.Tertiary" />
                        </label>
                    </div>
                    <Preview Kit=kit>
                        <div>
                            <label>Primary</label>
                            <div class="color-display" style="background-color: var(--primary-400)"></div>
                            <div class="subcolor-display">
                                @foreach (var weight in Weights)
                                {
                                    string typeWeight = "primary" + "-" + weight;
                                    <div style="background-color: var(--primary-@weight)">
                                        <EditColor value="@SetValue("primary", @weight)" @onchange="@(e => Overrides("primary", @weight, e.Value.ToString()))"/>
                                    </div>
                                }
                            </div>
                        </div>
                        <div>
                            <label>Secondary</label>
                            <div class="color-display" style="background-color: var(--secondary-400)"></div>
                            <div class="subcolor-display">
                                @foreach (var weight in Weights)
                                {
                                    string typeWeight = "secondary" + "-" + weight;
                                    <div style="background-color: var(--secondary-@weight)">
                                        <EditColor value="@SetValue("secondary", @weight)" @onchange="@(e => Overrides("secondary", @weight, e.Value.ToString()))"/>
                                    </div>
                                }
                            </div>
                        </div>
                        <div>
                            <label>Tertiary</label>
                            <div class="color-display" style="background-color: var(--tertiary-400)"></div>
                            <div class="subcolor-display">
                                @foreach (var weight in Weights)
                                {
                                    string typeWeight = "tertiary" + "-" + weight;
                                    <div style="background-color: var(--tertiary-@weight)">
                                        <EditColor value="@SetValue("tertiary", @weight)" @onchange="@(e => Overrides("tertiary", @weight, e.Value.ToString()))"/>
                                    </div>
                                }
                            </div>
                        </div>
                    </Preview>

                    <header>
                        <h3>Grayscale</h3>
                        <p>
                            The grayscale colors will primarily be used for text.
                        </p>
                    </header>
                    <div class="section">
                        <label>
                            Darkest
                            <InputColor @bind-Value="Model.Darkest" />
                        </label>
                        <label>
                            Lightest
                            <InputColor @bind-Value="Model.Lightest" />
                        </label>
                    </div>

                    <Preview Kit=kit AdditionalClass="greyscale">
                        @foreach (var weight in Weights)
                        {
                            <div>
                                <label>@weight</label>
                                <div class="color-display" style="background-color: var(--grey-@weight)"></div>
                            </div>
                        }
                    </Preview>

                    <header>
                        <h3>System Colors</h3>
                        <p>
                            The system colors are used to highlight alerts.
                        </p>
                    </header>
                    <div class="section">
                        <label>
                            Error
                            <InputColor @bind-Value="Model.Error" />
                        </label>
                        <label>
                            Warning
                            <InputColor @bind-Value="Model.Warning" />
                        </label>
                        <label>
                            Success
                            <InputColor @bind-Value="Model.Success" />
                        </label>
                    </div>
                    <Preview Kit=kit AdditionalClass="noscale">
                        <div>
                            <label>Error</label>
                            <div class="color-display" style="background-color: var(--error-500)"></div>
                        </div>
                        <div>
                            <label>Warning</label>
                            <div class="color-display" style="background-color: var(--warning-500)"></div>
                        </div>
                        <div>
                            <label>Success</label>
                            <div class="color-display" style="background-color: var(--success-500)"></div>
                        </div>
                    </Preview>

                    <header>
                        <h3>Preview</h3>
                        <p>A small example of all colors, buttons, and typography applied to two cards.</p>
                    </header>
                    <Preview Kit=kit AdditionalClass="mockup">
                        <div class="card-with-image">
                            <img src="/images/example1.png" alt="Example mockup" />
                            <div>
                                <h6 class="tertiary">Information</h6>
                                <h4>Brand Colors</h4>
                                <p>
                                    Lorem ipsum dolor sit amet, consectetuer adipiscing elit
                                </p>
                                <button>Primary CTA</button>
                            </div>
                        </div>
                        <div class="card">
                            <h6 class="tertiary">Information</h6>
                            <h4>Brand Colors</h4>
                            <p>
                                Lorem ipsum dolor sit amet, consectetuer adipiscing elit
                            </p>
                            <div class="buttons">
                                <button>Primary CTA</button>
                                <button class="secondary">Secondary CTA</button>
                            </div>
                        </div>
                    </Preview>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    List<string> Weights = new List<string> { "900", "800", "700", "600", "500", "400", "300", "200", "100", "50" };

    protected override async Task OnInitializedAsync()
    {
        DebounceInputs = true;
        await base.OnInitializedAsync();
    }

    protected override async Task<ColorsModel> GetAsync()
    {
        return await PublicApi().GetColorsAsync(kitId);
    }

    protected override async Task<Kit> UpdateAsync()
    {
        return await PublicApi().UpdateColorsAsync(Model);
    }

    private async Task Overrides(string type, string weight, string hex)
    {
        if (type.ToLower() == "primary")
        {
            string typeWeight = type + "-" + weight;
            Model.PrimaryColorOverrides = new Dictionary<string, string>();
            Model.PrimaryColorOverrides[typeWeight] = hex;
        }
        if (type.ToLower() == "secondary")
        {
            string typeWeight = type + "-" + weight;
            Model.SecondaryColorOverrides = new Dictionary<string, string>();
            Model.SecondaryColorOverrides[typeWeight] = hex;
        }
        if (type.ToLower() == "tertiary")
        {
            string typeWeight = type + "-" + weight;
            Model.TertiaryColorOverrides = new Dictionary<string, string>();
            Model.TertiaryColorOverrides[typeWeight] = hex;
        }

        await UpdateAsync();
    }

    private string SetValue(string type, string weight)
    {
        if (type.ToLower() == "primary") {
            string typeWeight = type + "-" + weight;

            if (Model.PrimaryColorOverrides == null)
                Dictionary<string, string> PrimaryColors = Color.Serialize(type);
                return Dictionary[typeWeight];

            if(Model.PrimaryColorOverrides.ContainsKey(typeWeight))
            {
                return Model.PrimaryColorOverrides[typeWeight];
            } else
            {
                return "";
            }
        }

        if (type.ToLower() == "secondary")
        {
            string typeWeight = type + "-" + weight;

            if (Model.SecondaryColorOverrides == null)
                Dictionary<string, string> SecondaryColors = Color.Serialize(type);
                return Dictionary[typeWeight];

            if (Model.SecondaryColorOverrides.ContainsKey(typeWeight))
            {
                return Model.SecondaryColorOverrides[typeWeight];
            }
            else
            {
                return "";
            }
        }
        if (type.ToLower() == "tertiary")
        {
            string typeWeight = type + "-" + weight;

            if (Model.TertiaryColorOverrides == null)
                Dictionary<string, string> TertiaryColors = Color.Serialize(type);
                return Dictionary[typeWeight];

            if (Model.TertiaryColorOverrides.ContainsKey(typeWeight))
            {
                return Model.TertiaryColorOverrides[typeWeight];
            }
            else
            {
                return "";
            }
        }
        return "";
    }
}
