@inherits HighlightPageBase<ColorsModel>
@page "/{kitId}/colors"
@using Kodekit.Web.Components.Colors

<div class="colors page">
    <div class="page__container">
        <header class="page--header">
            <div class="title">Base Styles</div>
            <h2>Colors</h2>
            <p>
                Colors selected here will be applied throughout the kit. They will be
                applied to their respective elements (such as primary and secondary buttons)
                &amp; system colors, as well as accessed via css variables.
            </p>
        </header>
        <div class="content">
            <!-- Contrast Checker Component Here -->
            <header class="section--header">
                <h3><span>01</span>Brand Colors</h3>
                <p>
                    The brand colors are the three main colors that will be used to accent your site.
                </p>
            </header>

            @if (Model != null)
            {
                <EditForm EditContext="@Context">
                    <div class="section color-palette">
                        <Preview Kit=kit>
                            <div class="color-display primary">
                                <div class="color-main">
                                    <ColorCard Type="Primary" Weight="Primary" Hex="primary-500" />
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "primary-" + weight;
                                        <ColorCard Type="Primary" Weight="@weight" Hex="@hex" />
                                    }
                                </div>
                            </div>
@*                            <div class="colors--secondary">
                                <label>Secondary</label>
                                <div class="color-display">
                                    <ColorCard Type="Secondary" Weight="Secondary" Hex="secondary-500" />
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "secondary-" + weight;
                                        <ColorCard Type="Secondary" Weight="@weight" Hex="hex" />
                                    }
                                </div>
                            </div>
                            <div class="colors--tertiary">
                                <label>Tertiary</label>
                                <div class="color-display">
                                    <ColorCard Type="Tertiary" Weight="Tertiary" Hex="tertiary-500" />
                                </div>
                                <div class="subcolor-display">
                                    @foreach (var weight in Weights)
                                    {
                                        string hex = "tertiary-" + weight;
                                        <ColorCard Type="Tertiary" Weight="@weight" Hex="hex" />
                                    }
                                </div>
                            </div>
*@                        </Preview>
                    </div>

@*                    <header class="section--header">
                        <h3><span>02</span>Grayscale</h3>
                        <p>
                            The grayscale colors will primarily be used for text.
                        </p>
                    </header>
                    <div class="section">
                        <label>
                            Darkest
                            <InputColor @bind-Value="Model.Darkest" />
                        </label>
                        <label>
                            Lightest
                            <InputColor @bind-Value="Model.Lightest" />
                        </label>
                    </div>

                    <Preview Kit=kit AdditionalClass="greyscale">
                        @foreach (var weight in Weights)
                        {
                            <div>
                                <label>@weight</label>
                                <div class="color-display" style="background-color: var(--grey-@weight)"></div>
                            </div>
                        }
                    </Preview>

                    <header class="section--header">
                        <h3><span>03</span>System Colors</h3>
                        <p>
                            The system colors are used to highlight alerts.
                        </p>
                    </header>
                    <div class="section">
                        <label>
                            Error
                            <InputColor @bind-Value="Model.Error" />
                        </label>
                        <label>
                            Warning
                            <InputColor @bind-Value="Model.Warning" />
                        </label>
                        <label>
                            Success
                            <InputColor @bind-Value="Model.Success" />
                        </label>
                    </div>
                    <Preview Kit=kit AdditionalClass="noscale">
                        <div>
                            <label>Error</label>
                            <div class="color-display" style="background-color: var(--error-500)"></div>
                        </div>
                        <div>
                            <label>Warning</label>
                            <div class="color-display" style="background-color: var(--warning-500)"></div>
                        </div>
                        <div>
                            <label>Success</label>
                            <div class="color-display" style="background-color: var(--success-500)"></div>
                        </div>
                    </Preview>

                    <header>
                        <h3>Preview</h3>
                        <p>A small example of all colors, buttons, and typography applied to two cards.</p>
                    </header>
                    <Preview Kit=kit AdditionalClass="mockup">
                        <div class="card-with-image">
                            <img src="/images/example1.png" alt="Example mockup" />
                            <div>
                                <h6 class="tertiary">Information</h6>
                                <h4>Brand Colors</h4>
                                <p>
                                    Lorem ipsum dolor sit amet, consectetuer adipiscing elit
                                </p>
                                <button>Primary CTA</button>
                            </div>
                        </div>
                        <div class="card">
                            <h6 class="tertiary">Information</h6>
                            <h4>Brand Colors</h4>
                            <p>
                                Lorem ipsum dolor sit amet, consectetuer adipiscing elit
                            </p>
                            <div class="buttons">
                                <button>Primary CTA</button>
                                <button class="secondary">Secondary CTA</button>
                            </div>
                        </div>
                    </Preview>
*@                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    List<string> Weights = new List<string> { "50", "100", "200", "300", "400", "500", "600", "700", "800", "900" };

    protected override async Task OnInitializedAsync()
    {
        DebounceInputs = true;
        await base.OnInitializedAsync();
    }

    protected override async Task<ColorsModel> GetAsync()
    {
        return await PublicApi().GetColorsAsync(kitId);
    }

    protected override async Task<Kit> UpdateAsync()
    {
        return await PublicApi().UpdateColorsAsync(Model);
    }
}