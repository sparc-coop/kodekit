@if (Kit != null)
{
    <div class="preview-example-container fadeInUp" style="animation-delay: @ExampleAnimationDelay;">
        @if (!IsLoading && CssUrl != null)
        {
            <style type="text/css">
                @@import url('@CssUrl');
            </style>

            <div class="preview-example @Scope @(AdditionalClass != null ? "preview-example--" + AdditionalClass : "")" @ref=PreviewBlock>
                @ChildContent
            </div>
        }
        <div class="preview-info">
            * Using live generated CSS from <a href="@CleanCssUrl" target="_blank">@CleanCssUrl</a>
        </div>
        <pre class="preview-code fadeInUp" style="animation-delay: @CodeAnimationDelay;">
            <code tabindex="0" class="language-html" @ref=CodeBlock>
            </code>
        </pre>
    </div>
}

@inject IConfiguration Config
@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public Kit Kit { get; set; }
    [Parameter] public string AdditionalClass { get; set; }
    [Parameter] public string ExampleAnimationDelay { get; set; }
    [Parameter] public string CodeAnimationDelay { get; set; }
    ElementReference PreviewBlock;
    ElementReference CodeBlock;
    string CssUrl;
    string CleanCssUrl;
    string Scope;
    string CurrentVersion;
    bool IsLoading;

    protected override void OnInitialized()
    {
        Scope = $"preview-{Guid.NewGuid()}";
    }

    protected override void OnParametersSet()
    {
        if (Kit == null) return;

        var newUrl = Config["ApiUrl"] + $"/{Kit.Id}.css?scope={Scope}&v={Kit.CurrentRevisionId}";
        Console.WriteLine("newurl " + newUrl);

        if (newUrl != CssUrl)
        {
            CssUrl = newUrl;
            Console.WriteLine("cssUrl " + CssUrl);

            CleanCssUrl = newUrl.Split("?")[0];
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("populatePreviewCode", PreviewBlock, CodeBlock);
    }
}
